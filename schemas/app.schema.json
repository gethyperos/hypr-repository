{
  "$id": "https://github.com/gethyperos/hypr-repository/tree/master/schemas/app.schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "App",
  "type": "object",
  "properties": {
    "App": {
      "type": "object",
      "description": "HyperOS App specifications",
      "properties": {
        "id": {
          "type": "string",
          "description": "App Unique Identifier",
          "patter": "^[a-zA-Z0-9-_]+$"
        },
        "name": {
          "type": "string",
          "description": "App Name"
        },
        "icon": {
          "type": "string",
          "description": "App Icon file (relative to app.json)",
          "pattern": ".*\\.(webp|png|gif)"
        },
        "description": {
          "type": "string",
          "description": "App Description",
          "minItems": 1,
          "uniqueItems": true
        },
        "categories": {
          "type": "array",
          "description": "App Categories (Must exist in categories.json file)",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "directory": {
          "type": "string",
          "description": "Directory name where this app.json is located (Usually the app name)",
          "pattern": "^[a-zA-Z0-9-_]+$"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "categories",
        "icon",
        "directory"
      ],
      "examples": [
        {
          "id": "welcome",
          "name": "HyperOS Example app",
          "description": "HyperOS App Template",
          "categories": ["example"],
          "icon": "example.png",
          "directory": "welcome"
        }
      ]
    },
    "Services": {
      "description": "Docker-compose style services list but expanded to allow Volta customizability",
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z0-9_-]+$": {
          "type": "object",
          "description": "Service",
          "properties": {
            "images": {
              "type": "object",
              "description": "App Docker images for supported platforms",
              "properties": {
                "armhf": {
                  "type": "string",
                  "description": "Arm / ArmHF image"
                },
                "arm64": {
                  "type": "string",
                  "description": "Arm64 image"
                },
                "x86_64": {
                  "type": "string",
                  "description": "Default image (32/64bit)"
                }
              },
              "required": ["x86_64"]
            },
            "container_name": {
              "type": "string",
              "description": "Container name, which will be later prefix by vltos-",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "environment": {
              "type": "array",
              "description": "Environment variables for the container",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Environment variable name"
                  },
                  "value": {
                    "type": "string",
                    "description": "Environment variable value"
                  },
                  "description": {
                    "type": "string",
                    "description": "Environment variable description (Used by front-end)"
                  }
                },
                "required": ["name", "value"],
                "minItems": 1
              }
            },
            "ports": {
              "type": "array",
              "description": "Ports for the container",
              "items": {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "description": "Port to be exposed on HOST"
                  },
                  "container": {
                    "type": "string",
                    "description": "Port on container"
                  },
                  "protocol": {
                    "type": "string",
                    "description": "Protocol (tcp/udp) defaults to tcp",
                    "enum": ["tcp", "udp"]
                  },
                  "description": {
                    "type": "string",
                    "description": "Port description (Used by front-end)"
                  }
                },
                "required": ["host", "container", "description"],
                "minItems": 1
              }
            },
            "volumes": {
              "type": "array",
              "description": "Volume bindings for the container",
              "items": {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "description": "Path on host",
                    "pattern": "((\\.{2}/{1})+|((\\.{1}/{1})?)|(/{1}))([a-zA-Z0-9])+$"
                  },
                  "container": {
                    "type": "string",
                    "description": "Path on container",
                    "pattern": "((\\.{2}/{1})+|((\\.{1}/{1})?)|(/{1}))([a-zA-Z0-9])+$"
                  },
                  "description": {
                    "type": "string",
                    "description": "Volume description (Used by front-end)"
                  }
                },
                "required": ["host", "container"],
                "minItems": 1
              }
            },
            "devices": {
              "type": "array",
              "description": "Devices for the container",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "host": {
                      "type": "string",
                      "description": "Path on host",
                      "pattern": "((\\.{2}/{1})+|((\\.{1}/{1})?)|(/{1}))(([a-zA-Z0-9]+/{1})+)([a-zA-Z0-9])+$"
                    },
                    "container": {
                      "type": "string",
                      "description": "Path on container",
                      "pattern": "((\\.{2}/{1})+|((\\.{1}/{1})?)|(/{1}))(([a-zA-Z0-9]+/{1})+)([a-zA-Z0-9])+$"
                    },
                    "description": {
                      "type": "string",
                      "description": "Device description (Used by front-end)"
                    }
                  },
                  "required": ["host", "container"],
                  "minItems": 1
                }
              ]
            },
            "cap_add": {
              "type": "array",
              "description": "Capabilities to add to the container",
              "items": {
                "type": "string",
                "description": "Capability name",
                "pattern": "^[a-zA-Z0-9-_]+$"
              },
              "minItems": 1
            },
            "cap_drop": {
              "type": "array",
              "description": "Capabilities to drop from the container",
              "items": {
                "type": "string",
                "description": "Capability name",
                "pattern": "^[a-zA-Z0-9-_]+$"
              },
              "minItems": 1
            },
            "restart": {
              "type": "string",
              "description": "Restart policy for the container",
              "enum": ["no", "always", "on-failure", "unless-stopped"]
            },
            "network_mode": {
              "type": "object",
              "description": " set service containers network mode.",
              "properties": {
                "mode": {
                  "description": "Network mode (must include service name if using service mode)",
                  "enum": ["host", "none", "service"],
                  "type": "string"
                },
                "service": {
                  "description": "Service name in case mode = service",
                  "type": "string"
                }
              },
              "required": ["mode"]
            },
            "logging": {
              "type": "object",
              "description": "logging defines the logging configuration for the service.",
              "properties": {
                "driver": {
                  "type": "string",
                  "description": "Logging driver",
                  "enum": [
                    "json-file",
                    "syslog",
                    "journald",
                    "gelf",
                    "fluentd",
                    "fluentbit"
                  ]
                },
                "options": {
                  "type": "object",
                  "description": "Logging driver options",
                  "properties": {
                    "tag": {
                      "type": "string",
                      "description": "Logging tag"
                    }
                  },
                  "minItems": 1
                }
              },
              "required": ["driver"]
            },
            "security_opt": {
              "type": "array",
              "description": "security_opt overrides the default labeling scheme for each container.",
              "items": {
                "type": "string",
                "description": "Security option",
                "pattern": "^[a-zA-Z0-9-_]+$"
              },
              "minItems": 1
            },
            "command": {
              "type": "string",
              "description": "Overrides the command executed on container start-up"
            }
          },
          "required": ["images", "container_name", "restart"],
          "minProperties": 1,
          "additionalProperties": false
        }
      },
      "examples": [
        {
          "myapp": {
            "images": {
              "x86_64": "myapp:latest",
              "armhf": "myapp:latest",
              "arm64": "myapp:latest"
            },
            "container_name": "myapp_container_name",
            "environment": [
              {
                "name": "variable_name",
                "value": "variable_value",
                "description": "Description of what this env does"
              }
            ],
            "ports": [
              {
                "host": "8080",
                "container": "8080",
                "protocol": "tcp",
                "description": "description of what this port is for"
              }
            ],
            "volumes": [
              {
                "host": "/path/on/host",
                "container": "/path/on/container",
                "description": "Description of what is this volume for"
              }
            ],
            "devices": [
              {
                "host": "/dev/dri",
                "container": "/dev/dri",
                "description": "GPU Device for hardware acceleration"
              }
            ]
          }
        }
      ]
    }
  },
  "required": ["App", "Services"]
}
